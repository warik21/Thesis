
# Generated by CodiumAI

import pytest
import cvxpy as cp
from utils.utils import create_constraints

"""
Code Analysis

Objective:
The objective of the function create_constraints is to take two lists as input and create a matrix variable and a set of constraints for a linear transport problem.

Inputs:
- source (list): A list of non-negative numbers representing the source distribution.
- target (list): A list of non-negative numbers representing the target distribution.

Flow:
- Create a matrix variable T_matrix with shape (len(source), len(target)) representing the transport plan.
- Create a list of constraints cons:
  - The sum of each column of T_matrix is equal to the corresponding element of target.
  - The sum of each row of T_matrix is equal to the corresponding element of source.
  - T_matrix is element-wise non-negative.
- Return T_matrix and cons.

Outputs:
- T_matrix (cvxpy.Variable): A matrix variable with shape (len(source), len(target)) representing the transport plan.
- cons (list): A list of cvxpy constraints.

Additional aspects:
- The function uses the cvxpy library to create the matrix variable and constraints.
- The transport problem being solved is a linear programming problem.
- The function assumes that the length of source and target lists are equal.
"""

class TestCreateConstraints:
    #  Tests that the create_constraints function returns a matrix variable and a set of constraints when given non-empty lists as input, and that the output has the expected properties.
    def test_happy_path_non_empty_lists(self):
        source = [1, 2, 3]
        target = [3, 2, 1]
        T_matrix, cons = create_constraints(source, target)
        assert isinstance(T_matrix, cp.Variable)
        assert len(T_matrix.shape) == 2
        assert T_matrix.shape[0] == len(source)
        assert T_matrix.shape[1] == len(target)
        assert isinstance(cons, list)
        assert len(cons) == 3
        assert sum(source) == sum(target)

    #  Tests that the function works correctly when source and target have the same length
    def test_happy_path_same_length(self):
        source = [1, 2, 3]
        target = [3, 2, 1]
        T_matrix, cons = create_constraints(source, target)
        assert cp.sum(T_matrix, axis=0).value.tolist() == target
        assert cp.sum(T_matrix, axis=1).value.tolist() == source
        assert (T_matrix.value >= 0).all()
